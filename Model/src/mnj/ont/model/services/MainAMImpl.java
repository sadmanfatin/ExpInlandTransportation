package mnj.ont.model.services;

import java.sql.CallableStatement;

import java.text.SimpleDateFormat;

import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

//import javax.print.attribute.standard.Severity;

import javax.servlet.http.HttpSession;

import mnj.ont.model.lov.views.FillBpoVOImpl;
import mnj.ont.model.lov.views.OrgVOImpl;
import mnj.ont.model.services.common.MainAM;

import oracle.adf.share.ADFContext;

//import oracle.as.management.translation.Severity;

import oracle.javatools.status.Severity;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.VariableManager;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaManager;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;

import org.apache.tools.ant.taskdefs.Length;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jan 09 12:22:26 PKT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MainAMImpl extends ApplicationModuleImpl implements MainAM {

    /**
     * This is the default constructor (do not remove).
     */
    public MainAMImpl() {
    }
    
    
    public void setSessionValues(String orgId, String userId, String respId,
                                 String respAppl) {

      
        if (userId != null) {
            //String flag = getFlagValue(userId, respId);
            System.out.println("Reps Id -->" + respId);
            FacesContext fctx = FacesContext.getCurrentInstance();
            ExternalContext ectx = fctx.getExternalContext();
            HttpSession userSession = (HttpSession)ectx.getSession(false);
            //userSession.setAttribute("Flag", flag);
            userSession.setAttribute("userId", userId);
            userSession.setAttribute("respId", respId);
            userSession.setAttribute("orgId", orgId);
            userSession.setAttribute("respAppl", respAppl);
        }
    }
    
    public void getUnitName() {
        Map sessionScope = ADFContext.getCurrent().getSessionScope();   
        String orgId = (String)sessionScope.get("orgId");
        Row headerRow = this.getInlandTransportHeaderVO1().getCurrentRow();
        //String orgId = headerRow.getAttribute("DivisionId").toString();
        ViewObject vo = this.getOrgVO1() ; //getoperatingUnitsVo1();
        vo.setWhereClause("ORGANIZATION_ID = " + orgId);
        vo.executeQuery();
        String name = null;
        vo.first();

        try {
            name = vo.getCurrentRow().getAttribute("OrgName").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        headerRow.setAttribute("OrgName",name);
    }

    /**
     * Container's getter for InlandTransportHeaderVO1.
     * @return InlandTransportHeaderVO1
     */
    public ViewObjectImpl getInlandTransportHeaderVO1() {
        return (ViewObjectImpl)findViewObject("InlandTransportHeaderVO1");
    }

    /**
     * Container's getter for InlandTransportLinesVO1.
     * @return InlandTransportLinesVO1
     */
    public ViewObjectImpl getInlandTransportLinesVO1() {
        return (ViewObjectImpl)findViewObject("InlandTransportLinesVO1");
    }

    /**
     * Container's getter for IedocExpInlandTranLinesFkLink1.
     * @return IedocExpInlandTranLinesFkLink1
     */
    public ViewLinkImpl getIedocExpInlandTranLinesFkLink1() {
        return (ViewLinkImpl)findViewLink("IedocExpInlandTranLinesFkLink1");
    }
    
    ////////////////////FILL invoice header///////////
    public void FillBpoHeader() {
        System.out.println("INTER FillRollLinesBPO ------->" );

        ViewObject populatevo = getFillBpoVO1();
        
        ViewObject headerVo = this.getInlandTransportHeaderVO1();
        Row currentHeaderRow = headerVo.getCurrentRow();
        String headerOrg;
        String headerOrgName;
        headerOrg = currentHeaderRow.getAttribute("OrgId").toString();
        headerOrgName = currentHeaderRow.getAttribute("OrgName").toString();
        // populatevo.executeQuery();
        
        RowSetIterator  r = populatevo.createRowSetIterator("r"); 
     //   System.out.println("Drop BPO ------->" + r.length);
        while (r.hasNext()) {
                Row row = r.next();
            if (row.getAttribute("FlagNew") != null &&
                row.getAttribute("FlagNew").equals("Y")) {
                System.out.println("FlagNew bpo --->" + row.getAttribute("FlagNew"));
                //FillBPO(row);
                ViewObject vo = getInlandTransportLinesVO1();
                Row linerow = vo.createRow();
                vo.insertRow(linerow);
                linerow.setNewRowState(Row.STATUS_INITIALIZED);
                        
                try{linerow.setAttribute("Style", row.getAttribute("Style") );}catch(Exception e){;}
                try{linerow.setAttribute("StyleNo", row.getAttribute("StyleNumber") );}catch(Exception e){;}
                try{linerow.setAttribute("OrderBpo", row.getAttribute("BpoNumber") );}catch(Exception e){;}
                try{linerow.setAttribute("Attribute1", row.getAttribute("Description") );}catch(Exception e){;}
                try{linerow.setAttribute("Attribute3", row.getAttribute("DeliveryNumber") );}catch(Exception e){;}
               // try{linerow.setAttribute("Attribute4", row.getAttribute("ShippedQuantity") );}catch(Exception e){;}
                try{linerow.setAttribute("Attribute5", row.getAttribute("Country") );}catch(Exception e){;}
                try{linerow.setAttribute("DcpoNo", row.getAttribute("Dcpo") );}catch(Exception e){;}
                try{linerow.setAttribute("Attribute7", row.getAttribute("BuyerName") );}catch(Exception e){;}
                try{linerow.setAttribute("Attribute8", row.getAttribute("ShipMode") );}catch(Exception e){;}
                try{linerow.setAttribute("Attribute9", row.getAttribute("Season") );}catch(Exception e){;}
                try{linerow.setAttribute("CurrentStyleNo", row.getAttribute("CurrentStyle") );}catch(Exception e){;}
                try{linerow.setAttribute("AttributeNum9", row.getAttribute("CbmTotal") );}catch(Exception e){;}
                //try{linerow.setAttribute("AttributeNum9", row.getAttribute("BalanceCbm") );}catch(Exception e){;}    
               // try{linerow.setAttribute("CartonQuantity", row.getAttribute("OriginalQty") );}catch(Exception e){;}
                try{linerow.setAttribute("InvoiceNo", row.getAttribute("InvoiceNo") );}catch(Exception e){;}
                try{linerow.setAttribute("PackList", row.getAttribute("PackList") );}catch(Exception e){;}
                
                
                try{linerow.setAttribute("PackedPcsQty", row.getAttribute("PackedPcsQty") );}catch(Exception e){;}
                try{linerow.setAttribute("PackedCartonQty", row.getAttribute("PackedCartonQty") );}catch(Exception e){;}
                
                                
                try{linerow.setAttribute("CartonAssign", row.getAttribute("BalanceCartonQty") );}catch(Exception e){;}
                try{linerow.setAttribute("AssignedPcs", row.getAttribute("BalancePcsQty") );}catch(Exception e){;}
                                
                try{linerow.setAttribute("SubContractOrg", headerOrg );}catch(Exception e){;}
                try{linerow.setAttribute("SubContractOrgName", headerOrgName );}catch(Exception e){;}
                
                try{linerow.setAttribute("ShippablePcsQty", row.getAttribute("BalancePcsQty") );}catch(Exception e){;}
                try{linerow.setAttribute("ShippableCartonQty", row.getAttribute("BalanceCartonQty") );}catch(Exception e){;}
                                    
            }
        }
        r.closeRowSetIterator();
    }
    
    
    public void popupDeselectActionListener(){
            
            ViewObject fillSize = this.getFillBpoVO1();// getFillView_VO1();
            RowSetIterator  fillSizeRowSetIterator = fillSize.createRowSetIterator("fillSizeRowSetIterator"); 
            while(fillSizeRowSetIterator.hasNext())
            {
                Row row = fillSizeRowSetIterator.next();
                row.setAttribute("FlagNew", "N");
                System.out.println("OK....");
            }
            fillSizeRowSetIterator.closeRowSetIterator();
    }
    
    public void FillBPO(Row poprow) {
        //  Row linerow =getRollBPO();
        ViewObject vo = getInlandTransportLinesVO1();
        Row linerow = vo.createRow();
        vo.insertRow(linerow);
        linerow.setNewRowState(Row.STATUS_INITIALIZED);
        try{
            linerow.setAttribute("Style", getPopulateValue(poprow, "Style"));
            linerow.setAttribute("OrderBpo", getPopulateValue(poprow, "BpoNumber"));
            linerow.setAttribute("Attribute1", getPopulateValue(poprow, "Description"));
         //linerow.setAttribute("Quantity", getPopulateValue(poprow, "OrderedQty"));
        }catch(Exception e){
            e.printStackTrace(); 
        }
    } //end of populateLines
    public Row getRollBPO() {
    //ExpCarrDocVO_Invoice1
        ViewObject vo = getInlandTransportLinesVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    } //end of createHeader

    public String getPopulateValue(Row r, String columnName){

        String value = null;
        try {
            value = r.getAttribute(columnName).toString();
        } catch (Exception e) {
            ;
        }
        return value;
    }


    public void populateExpInlandLines1(String OrgId) {
    }

    public void populateExpInlandLines(Row poprow) {
    }

    public Row createExpInlandLines() {
        return null;
    }

    public void callExpInlandFetch() {
    }

    /**
     * Container's getter for CommercalTabVO1.
     * @return CommercalTabVO1
     */
    public ViewObjectImpl getCommercalTabVO1() {
        return (ViewObjectImpl)findViewObject("CommercalTabVO1");
    }

    /**
     * Container's getter for HeaderCommTabVL1.
     * @return HeaderCommTabVL1
     */
    public ViewLinkImpl getHeaderCommTabVL1() {
        return (ViewLinkImpl)findViewLink("HeaderCommTabVL1");
    }


    public void populateTracking(String TrackingNum){
        System.out.println("valueChange_TrackingNO");
        ViewObject headerVO =  this.getInlandTransportHeaderVO1();
        Row rowHeaders = headerVO.getCurrentRow();
        String track = TrackingNum;
        System.out.println("TrackingNum "+TrackingNum);
//        try{
//            track = rowHeaders.getAttribute("AttributeNum10").toString();
//        }catch(Exception ee){
//            ee.printStackTrace();    
//        }
        System.out.println("Track "+ track);
//        String org_id = null;
//        try{
//            org_id = rowHeaders.getAttribute("ORG_ID").toString();
//        }catch(Exception ee){
//            org_id = null;
//        }
//        
//        if(org_id.equals("341")){
//            this.getTrackingVO1();
//        }
        if(track != null)
        {
            ViewObject trackingVO =  this.getTrackingVO1();
            //VariableValueManager vm = trackingVO.ensureVariableManager();
            try{
               // vm.setVariableValue("P_TRACK_NUMBER", track);
                trackingVO.setWhereClause("TRACKING_NO="+track);
                //trackingVO.setNamedWhereClauseParam("P_TRACK_NUMBER",track);
                System.out.println("try "+trackingVO.getQuery());
                
            }catch(Exception ee){
                ee.printStackTrace();
                System.out.println("catch "+trackingVO.getQuery());
            }
            trackingVO.executeQuery();
            Row trackRow = null;
            try{
                trackRow = trackingVO.first();
                System.out.println("trackRow "+trackRow);
            }catch(Exception ee){
                ee.printStackTrace();    
                System.out.println("trackRow "+trackRow);
            }
            if(trackRow != null){
                try{
                    rowHeaders.setAttribute("TransportationAgencyName",trackRow.getAttribute("TransportationAgencyName").toString());
                    System.out.println(trackRow.getAttribute("TransportationAgencyName").toString());
                }catch(Exception ee){ ee.printStackTrace() ;} 
                try{
                    rowHeaders.setAttribute("VehicleNumber",trackRow.getAttribute("VehicleNumber").toString());
                    System.out.println(trackRow.getAttribute("VehicleNumber").toString());
                }catch(Exception ee){ee.printStackTrace() ;} 
                try{
                    rowHeaders.setAttribute("DriverName",trackRow.getAttribute("DriverName").toString());
                    System.out.println(trackRow.getAttribute("DriverName").toString());
                }catch(Exception ee){ee.printStackTrace() ;} 
                try{
                    rowHeaders.setAttribute("DriverMobileNumber",trackRow.getAttribute("DriverMobileNumber").toString());
                    System.out.println(trackRow.getAttribute("DriverMobileNumber").toString());
                }catch(Exception ee){ee.printStackTrace() ;}
                try{
                    rowHeaders.setAttribute("RcvFlag","RCVD");
                }catch(Exception ee){ee.printStackTrace() ;}
            }else{
                rowHeaders.setAttribute("TransportationAgencyName",null);
                rowHeaders.setAttribute("VehicleNumber",null);
                rowHeaders.setAttribute("DriverName",null);
                rowHeaders.setAttribute("DriverMobileNumber",null);
                rowHeaders.setAttribute("RcvFlag",null);
            }
        }
    }

    /**
     * Container's getter for TrackingVO1.
     * @return TrackingVO1
     */
    public ViewObjectImpl getTrackingVO1() {
        return (ViewObjectImpl)findViewObject("TrackingVO1");
    }

    /**
     * Container's getter for OrgVO1.
     * @return OrgVO1
     */
    public OrgVOImpl getOrgVO1() {
        return (OrgVOImpl)findViewObject("OrgVO1");
    }
    
    public void cargoHandOverDateValidation(){
        // Get Cargo HandOver Date
        java.util.Date date = null;
        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        ViewObject commVo = this.getCommercalTabVO1();
        Row row = commVo.getCurrentRow();
        try{
            String CargoHandoverDate = null;
            try{
                CargoHandoverDate = row.getAttribute("CargoHandoverDate").toString();
            }catch(Exception e){
                return;
               // CargoHandoverDate = null;    
            }
            date = formatter.parse(CargoHandoverDate);
            System.out.println("Cargo Handover Date Util "+date);
        }catch(Exception e){
            e.printStackTrace(); 
        }
        
        // Get Cargo Unloading Date
        java.util.Date date1 = null;
        try{
            String CargoUnloadingDate = null;
            try{
                CargoUnloadingDate = row.getAttribute("CargoUnloadingDate").toString();
                System.out.println("CargoUnloadingDate "+CargoUnloadingDate);
            }catch(Exception e){
            return;
              //  CargoUnloadingDate = null;
            }
            date1 = formatter.parse(CargoUnloadingDate);
            System.out.println("Cargo Unloading Date Util "+ date1);
        }catch(Exception e){
            e.printStackTrace(); 
        }
        
        // Validation
//        if(date1.equals(date) || date1.before(date)){
//            
//            if(date1.getDay() == date.getDay() 
//                    && date1.getMonth() == date.getMonth()
//                            && date1.getYear() == date.getYear()
//                                && date1.getHours() == date.getHours()
//                                    && date1.getMinutes() >= date.getMinutes() )
//                showMessage("Invalid Time...");        
//                             
//        }
//        else 
        if(date1.after(date)){
           
            showMessage("Cargo Unloading Date & Time can't be after Cargo Hand-over Date & Time");
                
        }
        
    }
    
    
    public String showMessage(String messageText) {
            FacesMessage fm = new FacesMessage(messageText);
            /**
             * set the type of the message.
             * Valid types: error, fatal,info,warning
             */
            //fm.setSeverity(FacesMessage.SEVERITY_ERROR);
            fm.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext context = FacesContext.getCurrentInstance();
            context.addMessage(null, fm);
            return null;
    }

    public void saveBtnAction (){
        
        ViewObject vo = this.getInlandTransportLinesVO1();
        RowSetIterator linesItr = vo.createRowSetIterator("linesItr");
        double linesTotalCbm = 0.00;
        double headersTotalCbm = 0.00;
        while(linesItr.hasNext()){
            Row row = linesItr.next()    ;
            try{
                linesTotalCbm = Double.parseDouble(row.getAttribute("AssignCbm").toString());
            }catch(Exception e){
                linesTotalCbm = 0.00;    
            }
            headersTotalCbm = linesTotalCbm + headersTotalCbm;
        }
        linesItr.closeRowSetIterator();
        ViewObject Header = this.getInlandTransportHeaderVO1();
        Header.getCurrentRow().setAttribute("AttributeNum8", headersTotalCbm);
        ViewObject CbmVO = this.getCbmValidationValueVO1();
        Row first = CbmVO.first();
        Double cbmlimit  = Double.parseDouble(first.getAttribute("Character1").toString());
       if(cbmlimit < headersTotalCbm){
           showMessage("Total CBM exceeds max allowed value "+cbmlimit);  
            
        }
        
       // boolean check = false;
      
        ViewObject headvo = this.getInlandTransportHeaderVO1();
        //ViewObject comvo = this.getCommercalTabVO1();
       // RowSetIterator comiter = comvo.createRowSetIterator("comLine");
//        while(comiter.hasNext()){
//            Row row = comiter.next();
//            try{
//               // if(row.getAttribute("Attribute1").toString().equals("Complete")){
//                if(headvo.getCurrentRow().getAttribute("StatusMode").toString().equals("Complete")){
//                    check = true;
//         
//                }else{
//                    check = false;
//                   
//                    break;
//                }
//            }catch(Exception e){
//               
//            }
//        }
        
        
   String sts=null;
   sts=headvo.getCurrentRow().getAttribute("StatusMode").toString();
          
       
        if(sts.equals("Complete")) {
           
            headvo.getCurrentRow().setAttribute("StatusMode", "Complete");
        }
        else {
            
            headvo.getCurrentRow().setAttribute("StatusMode", "Incomplete");
        }
        
//        if(ch == 1){
//            headvo.getCurrentRow().setAttribute("StatusMode", "Complete");
//        }else{
//            headvo.getCurrentRow().setAttribute("StatusMode", "Incomplete");
//        }
        
//        if(check == true){
//        System.out.println("....................complete mode");
//            headvo.getCurrentRow().setAttribute("StatusMode", "Complete");
//        }else{
//            headvo.getCurrentRow().setAttribute("StatusMode", "Incomplete");
//        }
        //comiter.closeRowSetIterator();
        this.getDBTransaction().commit();
        
        
        
    }


    /**
     * Container's getter for CbmValidationValueVO1.
     * @return CbmValidationValueVO1
     */
    public ViewObjectImpl getCbmValidationValueVO1() {
        return (ViewObjectImpl)findViewObject("CbmValidationValueVO1");
    }
    
    public void populateBalancePerPcs(){
        ViewObject lvo = this.getInlandTransportLinesVO1();
        Row row = lvo.getCurrentRow();
        double CartonQuantity = 0.00; 
        double CartonAssign = 0.00;
        double Balance = 0.00;
        double BalancePcs = 0.00;
        double PcPerBox = 0.00;
        double shippableQty = 0.00;
        double CartonTo = 0.00;
        double Height = 0.00;
        double Width = 0.00;
        double Length = 0.00;
        double AssignCBM = 0.00;
        try{
            CartonAssign = Double.parseDouble(row.getAttribute("CartonAssign").toString());
            System.out.println("CartonAssign "+CartonAssign);
        }catch(Exception e){
            ;
        }
        try{
            Balance = Double.parseDouble(row.getAttribute("Balance").toString());
            System.out.println("Balance "+Balance);
        }catch(Exception e){
            ;
        }
        try{
            shippableQty = Double.parseDouble(row.getAttribute("Attribute4").toString());
            System.out.println("shippableQty "+shippableQty);
        }catch(Exception e){
            ;
        }
        
        if(Balance > 0.00){
            System.out.println("Balance greater than 0");
            ViewObject Bvo = this.getBalancePcsVO1();
            RowSetIterator  BrowItr = Bvo.createRowSetIterator("BrowItr");
            while(BrowItr.hasNext()){
                System.out.println("LOOP..");
                Row Brow = BrowItr.next();
                try{
                    CartonQuantity = Double.parseDouble(Brow.getAttribute("CartonQuantity").toString());     
                    System.out.println("CartonQuantity "+CartonQuantity);
                }catch(Exception e){
                    System.out.println("CartonQuantity Eror..");
                }
            
                if(Balance > CartonQuantity ){
                    System.out.println("Balance greater than Carton Quantity");
                    Balance = Balance - CartonQuantity;
                    try{
                        BalancePcs = Double.parseDouble(Brow.getAttribute("TotalPcsPerBox").toString()) + BalancePcs ;   
                        System.out.println("BalancePcs "+BalancePcs);
                    }catch(Exception e){
                        System.out.println("BalancePcs Error");    
                    }
                }
                else{
                    System.out.println("Balance Less than Carton Quantity");
                    try{
                        PcPerBox = Double.parseDouble(Brow.getAttribute("PcPerBox").toString());
                        System.out.println("PcPerBox "+PcPerBox);
                    }catch(Exception e){
                        System.out.println("PcPerBox Error");    
                    }
                    
                    System.out.println("Balance is " +Balance);
                    System.out.println("BalancePcs");
                    
                    BalancePcs = ( Balance * PcPerBox ) + BalancePcs;
                    break;
                }
            }
            BrowItr.closeRowSetIterator();
        }
        if(CartonAssign > 0.00) {
            System.out.println("CartonAssign greater than 0");
            ViewObject CBMvo = this.getAssignCBMVO1();
            System.out.println("Row Count "+CBMvo.getRowCount());
            RowSetIterator  CBMvoItr = CBMvo.createRowSetIterator("CBMvoItr"); 
            while(CBMvoItr.hasNext()){
                Row cbmRow = CBMvoItr.next();
                try{
                    CartonTo = Double.parseDouble(cbmRow.getAttribute("CartonTo").toString());     
                    System.out.println("CartonTo "+CartonTo);
                }catch(Exception e){
                    System.out.println("CartonTo Eror..");
                }
                ViewObject preVO = this.getPreviousAssignCartonVO1();
                double preAssignCarton = 0.00; 
                if(preVO.getRowCount() > 0 ){
                    try{
                        preAssignCarton = Double.parseDouble(preVO.first().getAttribute("CartonAssign").toString());
                    }catch(Exception e){
                        ;
                    }
                    if(preAssignCarton < CartonTo){
                        try{
                            double AssignCbm = Double.parseDouble(cbmRow.getAttribute("AssignCbm").toString());     
                            System.out.println("AssignCbm "+AssignCbm);
                        }catch(Exception e){
                            System.out.println("AssignCbm Error..");
                        }
                        if(CartonAssign > CartonTo){
                            CartonAssign = CartonAssign - CartonTo;
                            
                            try{
                                Length = Double.parseDouble(cbmRow.getAttribute("Length").toString());     
                                System.out.println("Length "+Length);
                            }catch(Exception e){
                                System.out.println("Length Eror..");
                            }
                            
                            try{
                                Width = Double.parseDouble(cbmRow.getAttribute("Width").toString());     
                                System.out.println("Width "+Width);
                            }catch(Exception e){
                                System.out.println("Width Eror..");
                            }
                            
                            try{
                                Height = Double.parseDouble(cbmRow.getAttribute("Height").toString());     
                                System.out.println("Height "+Height);
                            }catch(Exception e){
                                System.out.println("Height Eror..");
                            }
                            
                            AssignCBM = ((CartonTo * Height * Width * Length) / 1000000) + AssignCBM;
                            System.out.println("CartonAssign "+CartonAssign);
                            System.out.println("AssignCBM "+AssignCBM);
                            
                        }
                        else{
                            
                            try{
                                Length = Double.parseDouble(cbmRow.getAttribute("Length").toString());     
                                System.out.println("Length "+Length);
                            }catch(Exception e){
                                System.out.println("Length Eror..");
                            }
                            
                            try{
                                Width = Double.parseDouble(cbmRow.getAttribute("Width").toString());     
                                System.out.println("Width "+Width);
                            }catch(Exception e){
                                System.out.println("Width Eror..");
                            }
                            
                            try{
                                Height = Double.parseDouble(cbmRow.getAttribute("Height").toString());     
                                System.out.println("Height "+Height);
                            }catch(Exception e){
                                System.out.println("Height Eror..");
                            }
                            
                            AssignCBM = Math.round((((CartonAssign * Height * Width * Length) / 1000000) + AssignCBM) * 100) / 100.00 ; 
                            System.out.println("TOtal Assign CBM "+AssignCBM);
                            break;
                        }
                    }
                }else{
                    if(CartonAssign > CartonTo){
                        CartonAssign = CartonAssign - CartonTo;
                        
                        try{
                            Length = Double.parseDouble(cbmRow.getAttribute("Length").toString());     
                            System.out.println("Length "+Length);
                        }catch(Exception e){
                            System.out.println("Length Eror..");
                        }
                        
                        try{
                            Width = Double.parseDouble(cbmRow.getAttribute("Width").toString());     
                            System.out.println("Width "+Width);
                        }catch(Exception e){
                            System.out.println("Width Eror..");
                        }
                        
                        try{
                            Height = Double.parseDouble(cbmRow.getAttribute("Height").toString());     
                            System.out.println("Height "+Height);
                        }catch(Exception e){
                            System.out.println("Height Eror..");
                        }
                        
                        AssignCBM = ((CartonTo * Height * Width * Length) / 1000000) + AssignCBM;
                        System.out.println("CartonAssign "+CartonAssign);
                        System.out.println("AssignCBM "+AssignCBM);
                        
                    }
                    else{
                        
                        try{
                            Length = Double.parseDouble(cbmRow.getAttribute("Length").toString());     
                            System.out.println("Length "+Length);
                        }catch(Exception e){
                            System.out.println("Length Eror..");
                        }
                        
                        try{
                            Width = Double.parseDouble(cbmRow.getAttribute("Width").toString());     
                            System.out.println("Width "+Width);
                        }catch(Exception e){
                            System.out.println("Width Eror..");
                        }
                        
                        try{
                            Height = Double.parseDouble(cbmRow.getAttribute("Height").toString());     
                            System.out.println("Height "+Height);
                        }catch(Exception e){
                            System.out.println("Height Eror..");
                        }
                        
                        AssignCBM = Math.round((((CartonAssign * Height * Width * Length) / 1000000) + AssignCBM) * 100) / 100.00 ; 
                        System.out.println("TOtal Assign CBM "+AssignCBM);
                        break;
                    }
                }
            }
            CBMvoItr.closeRowSetIterator();
        }
        
        row.setAttribute("BalancePcs", BalancePcs);
        System.out.println("BalancePcs "+BalancePcs);
        row.setAttribute("AssignedPcs", shippableQty - BalancePcs);
        System.out.println("AssignedPcs "+ (shippableQty - BalancePcs));
        row.setAttribute("AssignCbm", AssignCBM);
        System.out.println("AssignCbm "+AssignCBM);
    }

    /**
     * Container's getter for BalancePcsVO1.
     * @return BalancePcsVO1
     */
    public ViewObjectImpl getBalancePcsVO1() {
        return (ViewObjectImpl)findViewObject("BalancePcsVO1");
    }

    /**
     * Container's getter for LinesBalanceVO1.
     * @return LinesBalanceVO1
     */
    public ViewLinkImpl getLinesBalanceVO1() {
        return (ViewLinkImpl)findViewLink("LinesBalanceVO1");
    }

    /**
     * Container's getter for AssignCBMVO1.
     * @return AssignCBMVO1
     */
    public ViewObjectImpl getAssignCBMVO1() {
        return (ViewObjectImpl)findViewObject("AssignCBMVO1");
    }

    /**
     * Container's getter for LinesAssignCBMVL1.
     * @return LinesAssignCBMVL1
     */
    public ViewLinkImpl getLinesAssignCBMVL1() {
        return (ViewLinkImpl)findViewLink("LinesAssignCBMVL1");
    }
    
//    public void populateTrackingInfo()
//    {
//      
//        ViewObject headerVO = this.getInlandTransportHeaderVO1();
//        Row hrow =   headerVO.getCurrentRow();
//        String headerId = null;
//        String trackingNo = null;
//        try{
//          headerId = hrow.getAttribute("InlandTransHeaderId").toString();
//          System.out.println("Header Id = "+headerId);  
//        }catch(Exception e){
//        ;    
//        }
//        try{
//            trackingNo = hrow.getAttribute("AttributeNum10").toString();
//            System.out.println("trackingNo "+trackingNo);
//        }catch(Exception e){
//            ;    
//        }
//        
//        ViewObject populateTrackingVo =  this.getpopulateTrackingInfoVO1();
//        ViewCriteriaManager vcm = populateTrackingVo.getViewCriteriaManager();
//        ViewCriteria vc = vcm.getViewCriteria("populateTrackingInfoVOCriteria");
//        VariableValueManager vvm = vc.ensureVariableManager();
//        vvm.setVariableValue("P_TRACKING_NO", trackingNo);
//        vvm.setVariableValue("P_HEADER_ID", headerId);
//        populateTrackingVo.applyViewCriteria(vc);
//        populateTrackingVo.executeQuery();
//        
//        System.out.println("ROw Count "+populateTrackingVo.getRowCount());
//        Row trackRow = populateTrackingVo.first();
//        try{
//            hrow.setAttribute("TransportationAgencyName", trackRow.getAttribute("TransportationAgencyName").toString());
//        }catch(Exception e)
//        {
//            ;
//        }
//        try{
//            hrow.setAttribute("TransportationCompanyName", trackRow.getAttribute("TransportationCompanyName" +
//                "").toString());
//        }catch(Exception e)
//        {
//            ;
//        }
//        try{
//            hrow.setAttribute("AttributeDate1", trackRow.getAttribute("AttributeDate1").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        try{
//            hrow.setAttribute("VehicleNumber", trackRow.getAttribute("VehicleNumber").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        try{
//            hrow.setAttribute("VehicleArrivalDate", trackRow.getAttribute("VehicleArrivalDate").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        try{
//            hrow.setAttribute("VehicleDepartureDate", trackRow.getAttribute("VehicleDepartureDate").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        try{
//            hrow.setAttribute("ExFactoryDate", trackRow.getAttribute("ExFactoryDate").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        try{
//            hrow.setAttribute("DriverMobileNumber", trackRow.getAttribute("DriverMobileNumber").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        try{
//            hrow.setAttribute("DriverLicenseNumber", trackRow.getAttribute("DriverLicenseNumber").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        try{
//            hrow.setAttribute("EscortId", trackRow.getAttribute("EscortId").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        try{
//            hrow.setAttribute("EscortName", trackRow.getAttribute("EscortName").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        try{
//            hrow.setAttribute("EscortMobileNumber", trackRow.getAttribute("EscortMobileNumber").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        try{
//            hrow.setAttribute("LockNumber", trackRow.getAttribute("LockNumber").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        try{
//            hrow.setAttribute("StatusMode", trackRow.getAttribute("StatusMode").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        try{
//            hrow.setAttribute("AttributeNum8", trackRow.getAttribute("AttributeNum8").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        
//        try{
//            hrow.setAttribute("Remarks", trackRow.getAttribute("Remarks").toString());
//        }catch(Exception e)
//        {
//            ;
//        }        
//        try{
//            hrow.setAttribute("DriverName", trackRow.getAttribute("DriverName").toString());
//        }catch(Exception e)
//        {
//            ;
//        }
//    }
    
        public void populateTrackingInfo()
    {
      
        ViewObject headerVO = this.getInlandTransportHeaderVO1();
        Row hrow =   headerVO.getCurrentRow();
        String headerId = null;
        String trackingNo = null;
        try{
          headerId = hrow.getAttribute("InlandTransHeaderId").toString();
          //System.out.println("Header Id = "+headerId);  
        }catch(Exception e){
        ;    
        }
        try{
            trackingNo = hrow.getAttribute("AttributeNum10").toString();
            //System.out.println("trackingNo = "+trackingNo);
        }catch(Exception e){
            ;    
        }
        
        String stmt =
            "BEGIN INLINE_TACK_PROCEDURE(:1,:2); COMMIT; END;";
        CallableStatement cs = getDBTransaction().createCallableStatement(stmt, 1);
        try {
            cs.setString(1, headerId);
            cs.setString(2, trackingNo);
            cs.executeUpdate();
            cs.close();
        } catch (Exception e) {
            System.out.println(e);
        }
        showMessage("Sender info populated successfully !!");
    }

    /**
     * Container's getter for populateTrackingInfoVO1.
     * @return populateTrackingInfoVO1
     */
    public ViewObjectImpl getpopulateTrackingInfoVO1() {
        return (ViewObjectImpl)findViewObject("populateTrackingInfoVO1");
    }


    /**
     * Container's getter for FillBpoVO1.
     * @return FillBpoVO1
     */
    public FillBpoVOImpl getFillBpoVO1() {
        return (FillBpoVOImpl)findViewObject("FillBpoVO1");
    }

    /**
     * Container's getter for BPOHeaderVL1.
     * @return BPOHeaderVL1
     */
    public ViewLinkImpl getBPOHeaderVL1() {
        return (ViewLinkImpl)findViewLink("BPOHeaderVL1");
    }

    /**
     * Container's getter for PreviousAssignCartonVO1.
     * @return PreviousAssignCartonVO1
     */
    public ViewObjectImpl getPreviousAssignCartonVO1() {
        return (ViewObjectImpl)findViewObject("PreviousAssignCartonVO1");
    }

    /**
     * Container's getter for LinesPreAssignCartonVL1.
     * @return LinesPreAssignCartonVL1
     */
    public ViewLinkImpl getLinesPreAssignCartonVL1() {
        return (ViewLinkImpl)findViewLink("LinesPreAssignCartonVL1");
    }
}
